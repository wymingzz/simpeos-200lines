
os.elf：     文件格式 elf32-i386
os.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00007c00

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000042e memsz 0x0000042e flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x000000b0 memsz 0x000000b0 flags r--
    LOAD off    0x00003000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000038ec memsz 0x00008100 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     000000b0  00009000  00009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000038ec  0000a000  0000a000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004800  0000d900  0000d900  000068ec  2**5
                  ALLOC
  4 .comment      00000026  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00006918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000002ee  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000017f  00000000  00000000  00006c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000172  00000000  00000000  00006dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000239  00000000  00000000  00006f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000057  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e74 l       .text	00000000 gdt_desc
00007e7a l       .text	00000000 idt_desc
00007e64 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000d8e8 l     O .data	00000004 task_tss.0
0000b000 l     O .data	00001000 page_table
0000d900 g     O .bss	00001000 task0_dpl3_stack
0000f900 g     O .bss	00001000 task1_dpl3_stack
00007e80 g     F .text	00000016 task_0
0000d000 g     O .data	00000068 task0_tss
0000a000 g     O .data	00001000 map_phy_buffer
00007f03 g     F .text	0000012b os_init
00007e50 g       .text	00000000 timer_init
00010900 g     O .bss	00001000 task1_dpl0_stack
0000d080 g     O .data	00000068 task1_tss
0000d0e8 g     O .data	00000800 gbt_table
00007c00 g       .text	00000000 _start
00007ee4 g     F .text	0000001f outb
0000d8ec g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 pg_dir
0000d8ec g       .data	00000000 _edata
00012100 g       .bss	00000000 _end
00007e96 g     F .text	00000016 task_1
00011900 g     O .bss	00000800 idt_table
0000e900 g     O .bss	00001000 task0_dpl0_stack
00007eac g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32, %bx		// 目标内存地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx			// 从哪个扇区开始读
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax			// ah为读取的扇区个数，al表示是读磁盘
	mov $0x80, %dx			// 从哪个磁盘读取数据
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi

	jc	read_self_all		// 判断flags的cf表示位是否是1，即读取数据是否出错，出错则跳转

	cli						// 关中断
    7c23:	fa                   	cli

	lgdt [gdt_desc]			// 设置GDT表的内存地址
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	74 7e                	je     7ca7 <read_self_all+0x94>
	lidt [idt_desc]			// 设置IDT表的内存地址
    7c29:	0f 01 1e             	lidtl  (%esi)
    7c2c:	7a 7e                	jp     7cac <read_self_all+0x99>
	// 将寄存器cr0的第一位置1，即进入保护模式
	mov $1, %eax
    7c2e:	66 b8 01 00          	mov    $0x1,%ax
    7c32:	00 00                	add    %al,(%eax)
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 eb 00 00 00       	call   7f03 <os_init>

	// 将页目录表的地址放入cr3寄存器中
	mov $pg_dir, %eax
    7e18:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 将寄存器cr4的第四位置1，即开启4MB的分页映射机制
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 将寄存器cr0的最高位置1，即进入分页模式
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	sti						// 开中断
    7e34:	fb                   	sti

	// 设置任务寄存器TR为task0 TSS的段选择子
	mov $TASK0_TSS_SEG, %ax
    7e35:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e39:	0f 00 d8             	ltr    %ax

	push $APP_DATA_SEG		     		// %ss
    7e3c:	6a 23                	push   $0x23
	push $task0_dpl3_stack + 1024 * 4	// %esp
    7e3e:	68 00 e9 00 00       	push   $0xe900
	push $0x202							// %eflags
    7e43:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG					// %cs
    7e48:	6a 1b                	push   $0x1b
	push $task_0_entry					// %eip
    7e4a:	68 64 7e 00 00       	push   $0x7e64

	iret
    7e4f:	cf                   	iret

00007e50 <timer_init>:

timer_init:					// 中断处理函数
	push %ds
    7e50:	1e                   	push   %ds
	pusha
    7e51:	60                   	pusha

	mov $0x20, %al
    7e52:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e54:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e56:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e5a:	8e d8                	mov    %eax,%ds
	call task_sched
    7e5c:	e8 4b 00 00 00       	call   7eac <task_sched>

	popa
    7e61:	61                   	popa
	pop %ds
    7e62:	1f                   	pop    %ds
	iret					//中断返回
    7e63:	cf                   	iret

00007e64 <task_0_entry>:

task_0_entry:				// 特权级为3的任务
	mov %ss, %ax
    7e64:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e67:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e69:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e6b:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7e6d:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e6f:	e9 0c 00 00 00       	jmp    7e80 <task_0>

00007e74 <gdt_desc>:
    7e74:	ff 07                	incl   (%edi)
    7e76:	e8                   	.byte 0xe8
    7e77:	d0 00                	rolb   (%eax)
	...

00007e7a <idt_desc>:
    7e7a:	ff 07                	incl   (%edi)
    7e7c:	00 19                	add    %bl,(%ecx)
    7e7e:	01 00                	add    %eax,(%eax)

00007e80 <task_0>:
//  类型定义
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

void task_0(void){
    7e80:	55                   	push   %ebp
    7e81:	89 e5                	mov    %esp,%ebp
    7e83:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7e86:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(;;){
        color--;
    7e8a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7e8e:	83 e8 01             	sub    $0x1,%eax
    7e91:	88 45 ff             	mov    %al,-0x1(%ebp)
    7e94:	eb f4                	jmp    7e8a <task_0+0xa>

00007e96 <task_1>:
    }
}

void task_1(void){
    7e96:	55                   	push   %ebp
    7e97:	89 e5                	mov    %esp,%ebp
    7e99:	83 ec 10             	sub    $0x10,%esp
    uint8_t color = 0;
    7e9c:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(;;){
        color++;
    7ea0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7ea4:	83 c0 01             	add    $0x1,%eax
    7ea7:	88 45 ff             	mov    %al,-0x1(%ebp)
    7eaa:	eb f4                	jmp    7ea0 <task_1+0xa>

00007eac <task_sched>:
    }
}

void task_sched(void){
    7eac:	55                   	push   %ebp
    7ead:	89 e5                	mov    %esp,%ebp
    7eaf:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG? TASK1_TSS_SEG: TASK0_TSS_SEG);
    7eb2:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7eb7:	83 f8 28             	cmp    $0x28,%eax
    7eba:	75 07                	jne    7ec3 <task_sched+0x17>
    7ebc:	b8 30 00 00 00       	mov    $0x30,%eax
    7ec1:	eb 05                	jmp    7ec8 <task_sched+0x1c>
    7ec3:	b8 28 00 00 00       	mov    $0x28,%eax
    7ec8:	a3 e8 d8 00 00       	mov    %eax,0xd8e8

    uint32_t addr[] = {0, task_tss};
    7ecd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7ed4:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7ed9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile("ljmpl *(%[a])"::[a]"r"(addr));
    7edc:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7edf:	ff 28                	ljmp   *(%eax)
}
    7ee1:	90                   	nop
    7ee2:	c9                   	leave
    7ee3:	c3                   	ret

00007ee4 <outb>:
};

/// @brief 调用汇编函数outb
/// @param data 传入al寄存器的值
/// @param port 传入dx寄存器的值
void outb(uint8_t data, uint16_t port){
    7ee4:	55                   	push   %ebp
    7ee5:	89 e5                	mov    %esp,%ebp
    7ee7:	83 ec 08             	sub    $0x8,%esp
    7eea:	8b 55 08             	mov    0x8(%ebp),%edx
    7eed:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ef0:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7ef3:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7ef7:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7efb:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7eff:	ee                   	out    %al,(%dx)
}
    7f00:	90                   	nop
    7f01:	c9                   	leave
    7f02:	c3                   	ret

00007f03 <os_init>:
// 声明汇编代码中的自定义函数
void timer_init(void);

/// @brief 对os进行初始化
/// @param
void os_init(void){
    7f03:	55                   	push   %ebp
    7f04:	89 e5                	mov    %esp,%ebp
    7f06:	83 ec 10             	sub    $0x10,%esp
    // 对8259芯片进行初始化
    outb(0x11, 0x20);
    7f09:	6a 20                	push   $0x20
    7f0b:	6a 11                	push   $0x11
    7f0d:	e8 d2 ff ff ff       	call   7ee4 <outb>
    7f12:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xa0);
    7f15:	68 a0 00 00 00       	push   $0xa0
    7f1a:	6a 11                	push   $0x11
    7f1c:	e8 c3 ff ff ff       	call   7ee4 <outb>
    7f21:	83 c4 08             	add    $0x8,%esp
    // 中断产生时，定义对应引脚查找IDT表中的位置
    outb(0x20, 0x21);
    7f24:	6a 21                	push   $0x21
    7f26:	6a 20                	push   $0x20
    7f28:	e8 b7 ff ff ff       	call   7ee4 <outb>
    7f2d:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);
    7f30:	68 a1 00 00 00       	push   $0xa1
    7f35:	6a 28                	push   $0x28
    7f37:	e8 a8 ff ff ff       	call   7ee4 <outb>
    7f3c:	83 c4 08             	add    $0x8,%esp
    // 配置从片的引脚2连接到主片的引脚2(引脚从0开始算起)
    outb(1 << 2, 0x21);
    7f3f:	6a 21                	push   $0x21
    7f41:	6a 04                	push   $0x4
    7f43:	e8 9c ff ff ff       	call   7ee4 <outb>
    7f48:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0xa1);
    7f4b:	68 a1 00 00 00       	push   $0xa1
    7f50:	6a 04                	push   $0x4
    7f52:	e8 8d ff ff ff       	call   7ee4 <outb>
    7f57:	83 c4 08             	add    $0x8,%esp

    outb(0x1, 0x21);
    7f5a:	6a 21                	push   $0x21
    7f5c:	6a 01                	push   $0x1
    7f5e:	e8 81 ff ff ff       	call   7ee4 <outb>
    7f63:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);
    7f66:	68 a1 00 00 00       	push   $0xa1
    7f6b:	6a 01                	push   $0x1
    7f6d:	e8 72 ff ff ff       	call   7ee4 <outb>
    7f72:	83 c4 08             	add    $0x8,%esp
    // 屏蔽除了主片的0号引脚以外的所有中断信号
    outb(0xfe, 0x21);
    7f75:	6a 21                	push   $0x21
    7f77:	68 fe 00 00 00       	push   $0xfe
    7f7c:	e8 63 ff ff ff       	call   7ee4 <outb>
    7f81:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);
    7f84:	68 a1 00 00 00       	push   $0xa1
    7f89:	68 ff 00 00 00       	push   $0xff
    7f8e:	e8 51 ff ff ff       	call   7ee4 <outb>
    7f93:	83 c4 08             	add    $0x8,%esp

    // 对8253定时器进行初始化，设定成每100ms产生一次中断
    uint16_t tmo = 1193180 / 100;
    7f96:	66 c7 45 fe 9b 2e    	movw   $0x2e9b,-0x2(%ebp)
    outb(0x36, 0x43);
    7f9c:	6a 43                	push   $0x43
    7f9e:	6a 36                	push   $0x36
    7fa0:	e8 3f ff ff ff       	call   7ee4 <outb>
    7fa5:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    7fa8:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    7fac:	0f b6 c0             	movzbl %al,%eax
    7faf:	6a 40                	push   $0x40
    7fb1:	50                   	push   %eax
    7fb2:	e8 2d ff ff ff       	call   7ee4 <outb>
    7fb7:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7fba:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    7fbe:	66 c1 e8 08          	shr    $0x8,%ax
    7fc2:	0f b6 c0             	movzbl %al,%eax
    7fc5:	6a 40                	push   $0x40
    7fc7:	50                   	push   %eax
    7fc8:	e8 17 ff ff ff       	call   7ee4 <outb>
    7fcd:	83 c4 08             	add    $0x8,%esp

    // 对IDT表的0x20位置进行设置
    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xffff;
    7fd0:	b8 50 7e 00 00       	mov    $0x7e50,%eax
    7fd5:	66 a3 00 1a 01 00    	mov    %ax,0x11a00
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    7fdb:	b8 50 7e 00 00       	mov    $0x7e50,%eax
    7fe0:	c1 e8 10             	shr    $0x10,%eax
    7fe3:	66 a3 06 1a 01 00    	mov    %ax,0x11a06
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7fe9:	66 c7 05 02 1a 01 00 	movw   $0x8,0x11a02
    7ff0:	08 00 
    idt_table[0x20].attr = 0x8e00;                              // 0x8e00 1000 1110 0000 0000  32位，中断门，存在
    7ff2:	66 c7 05 04 1a 01 00 	movw   $0x8e00,0x11a04
    7ff9:	00 8e 

    // 设置两个任务段选择子的基地址
    gbt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    7ffb:	b8 00 d0 00 00       	mov    $0xd000,%eax
    8000:	66 a3 12 d1 00 00    	mov    %ax,0xd112
    gbt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    8006:	b8 80 d0 00 00       	mov    $0xd080,%eax
    800b:	66 a3 1a d1 00 00    	mov    %ax,0xd11a

    // 在虚拟内存地址为0x80000000的地方映射一块4KB的空间
    pg_dir[MAP_ADDR >> 22]= (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    8011:	b8 00 b0 00 00       	mov    $0xb000,%eax
    8016:	83 c8 07             	or     $0x7,%eax
    8019:	a3 00 c8 00 00       	mov    %eax,0xc800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    801e:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8023:	83 c8 07             	or     $0x7,%eax
    8026:	a3 00 b0 00 00       	mov    %eax,0xb000
    802b:	90                   	nop
    802c:	c9                   	leave
    802d:	c3                   	ret
