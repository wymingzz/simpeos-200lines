
os.elf：     文件格式 elf32-i386
os.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00007c00

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000054f memsz 0x0000054f flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000010c memsz 0x0000010c flags r--
    LOAD off    0x00003000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000038ec memsz 0x00008104 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054f  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001a  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  0000901c  0000901c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000038ec  0000a000  0000a000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00004804  0000d900  0000d900  000068ec  2**5
                  ALLOC
  5 .comment      00000026  00000000  00000000  000068ec  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00006918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000003df  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000019b  00000000  00000000  00006d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000208  00000000  00000000  00006ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000267  00000000  00000000  000070da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000057  00000000  00000000  00007341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e94 l       .text	00000000 gdt_desc
00007e9a l       .text	00000000 idt_desc
00007e84 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
00012100 l     O .bss	00000004 row.1
0000d8e8 l     O .data	00000004 task_tss.0
0000b000 l     O .data	00001000 page_table
0000d900 g     O .bss	00001000 task0_dpl3_stack
0000f900 g     O .bss	00001000 task1_dpl3_stack
00007f38 g     F .text	0000002e sys_show
00007f66 g     F .text	0000002e task_0
0000d000 g     O .data	00000068 task0_tss
0000a000 g     O .data	00001000 map_phy_buffer
00008019 g     F .text	00000136 os_init
00007e50 g       .text	00000000 timer_init
00010900 g     O .bss	00001000 task1_dpl0_stack
0000d080 g     O .data	00000068 task1_tss
00007ea0 g     F .text	00000098 do_syscall
0000d0e8 g     O .data	00000800 gbt_table
00007c00 g       .text	00000000 _start
00007ffa g     F .text	0000001f outb
0000d8ec g       .bss	00000000 __bss_start
0000c000 g     O .data	00001000 pg_dir
0000d8ec g       .data	00000000 _edata
00012104 g       .bss	00000000 _end
00007e64 g       .text	00000000 syscall_handler
00007f94 g     F .text	0000002e task_1
00011900 g     O .bss	00000800 idt_table
0000e900 g     O .bss	00001000 task0_dpl0_stack
00007fc2 g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32, %bx		// 目标内存地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx			// 从哪个扇区开始读
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax			// ah为读取的扇区个数，al表示是读磁盘
	mov $0x80, %dx			// 从哪个磁盘读取数据
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi

	jc	read_self_all		// 判断flags的cf表示位是否是1，即读取数据是否出错，出错则跳转

	cli						// 关中断
    7c23:	fa                   	cli

	lgdt [gdt_desc]			// 设置GDT表的内存地址
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	94                   	xchg   %eax,%esp
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt [idt_desc]			// 设置IDT表的内存地址
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	9a 7e 66 b8 01 00 00 	lcall  $0x0,$0x1b8667e
	// 将寄存器cr0的第一位置1，即进入保护模式
	mov $1, %eax
    7c33:	00 0f                	add    %cl,(%edi)
	lmsw %ax
    7c35:	01 f0                	add    %esi,%eax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 01 02 00 00       	call   8019 <os_init>

	// 将页目录表的地址放入cr3寄存器中
	mov $pg_dir, %eax
    7e18:	b8 00 c0 00 00       	mov    $0xc000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 将寄存器cr4的第四位置1，即开启4MB的分页映射机制
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 将寄存器cr0的最高位置1，即进入分页模式
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	sti						// 开中断
    7e34:	fb                   	sti

	// 设置任务寄存器TR为task0 TSS的段选择子
	mov $TASK0_TSS_SEG, %ax
    7e35:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e39:	0f 00 d8             	ltr    %ax

	push $APP_DATA_SEG		     		// %ss
    7e3c:	6a 23                	push   $0x23
	push $task0_dpl3_stack + 1024 * 4	// %esp
    7e3e:	68 00 e9 00 00       	push   $0xe900
	push $0x202							// %eflags
    7e43:	68 02 02 00 00       	push   $0x202
	push $APP_CODE_SEG					// %cs
    7e48:	6a 1b                	push   $0x1b
	push $task_0_entry					// %eip
    7e4a:	68 84 7e 00 00       	push   $0x7e84

	iret
    7e4f:	cf                   	iret

00007e50 <timer_init>:

timer_init:					// 中断处理函数
	push %ds
    7e50:	1e                   	push   %ds
	pusha
    7e51:	60                   	pusha

	mov $0x20, %al
    7e52:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e54:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e56:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e5a:	8e d8                	mov    %eax,%ds
	call task_sched
    7e5c:	e8 61 01 00 00       	call   7fc2 <task_sched>

	popa
    7e61:	61                   	popa
	pop %ds
    7e62:	1f                   	pop    %ds
	iret					//中断返回
    7e63:	cf                   	iret

00007e64 <syscall_handler>:

syscall_handler:
	push %ds
    7e64:	1e                   	push   %ds
	pusha
    7e65:	60                   	pusha

	mov $KERNEL_DATA_SEG, %ax
    7e66:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e6a:	8e d8                	mov    %eax,%ds

	// 从函数的最后一个参数开始压入栈中
	mov %esp, %ebp
    7e6c:	89 e5                	mov    %esp,%ebp
	push 13 * 4(%ebp)
    7e6e:	ff 75 34             	push   0x34(%ebp)
	push 12 * 4(%ebp)
    7e71:	ff 75 30             	push   0x30(%ebp)
	push 11 * 4(%ebp)
    7e74:	ff 75 2c             	push   0x2c(%ebp)
	call do_syscall
    7e77:	e8 24 00 00 00       	call   7ea0 <do_syscall>
	add $(3 * 4), %esp
    7e7c:	83 c4 0c             	add    $0xc,%esp

	popa
    7e7f:	61                   	popa
	pop %ds
    7e80:	1f                   	pop    %ds
	retf $(3 * 4)
    7e81:	ca 0c 00             	lret   $0xc

00007e84 <task_0_entry>:

task_0_entry:				// 特权级为3的任务
	mov %ss, %ax
    7e84:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e87:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e89:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e8b:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7e8d:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e8f:	e9 d2 00 00 00       	jmp    7f66 <task_0>

00007e94 <gdt_desc>:
    7e94:	ff 07                	incl   (%edi)
    7e96:	e8                   	.byte 0xe8
    7e97:	d0 00                	rolb   (%eax)
	...

00007e9a <idt_desc>:
    7e9a:	ff 07                	incl   (%edi)
    7e9c:	00 19                	add    %bl,(%ecx)
    7e9e:	01 00                	add    %eax,(%eax)

00007ea0 <do_syscall>:

/// @brief 系统调用函数(目前只有显示字符串)
/// @param func 功能号
/// @param str  需要显示的字符串
/// @param color    字符串颜色
void do_syscall(int func, char *str, char color){
    7ea0:	55                   	push   %ebp
    7ea1:	89 e5                	mov    %esp,%ebp
    7ea3:	83 ec 14             	sub    $0x14,%esp
    7ea6:	8b 45 10             	mov    0x10(%ebp),%eax
    7ea9:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 0;                 // 行号

    if(func == 2){                      // 显示字符串
    7eac:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eb0:	75 6c                	jne    7f1e <do_syscall+0x7e>
        uint16_t *dest = (uint16_t*) 0xb8000 + 80 * row;
    7eb2:	a1 00 21 01 00       	mov    0x12100,%eax
    7eb7:	89 c2                	mov    %eax,%edx
    7eb9:	89 d0                	mov    %edx,%eax
    7ebb:	c1 e0 02             	shl    $0x2,%eax
    7ebe:	01 d0                	add    %edx,%eax
    7ec0:	c1 e0 05             	shl    $0x5,%eax
    7ec3:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ec8:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*str)
    7ecb:	eb 29                	jmp    7ef6 <do_syscall+0x56>
        {
            *dest++ = *str++ | (color << 8);
    7ecd:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ed0:	8d 50 01             	lea    0x1(%eax),%edx
    7ed3:	89 55 0c             	mov    %edx,0xc(%ebp)
    7ed6:	0f b6 00             	movzbl (%eax),%eax
    7ed9:	66 0f be d0          	movsbw %al,%dx
    7edd:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
    7ee1:	c1 e0 08             	shl    $0x8,%eax
    7ee4:	89 d1                	mov    %edx,%ecx
    7ee6:	09 c1                	or     %eax,%ecx
    7ee8:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7eeb:	8d 50 02             	lea    0x2(%eax),%edx
    7eee:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7ef1:	89 ca                	mov    %ecx,%edx
    7ef3:	66 89 10             	mov    %dx,(%eax)
        while (*str)
    7ef6:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ef9:	0f b6 00             	movzbl (%eax),%eax
    7efc:	84 c0                	test   %al,%al
    7efe:	75 cd                	jne    7ecd <do_syscall+0x2d>
        }

        row = (row >= 25) ? 0 : (row + 1);
    7f00:	a1 00 21 01 00       	mov    0x12100,%eax
    7f05:	83 f8 18             	cmp    $0x18,%eax
    7f08:	7f 0a                	jg     7f14 <do_syscall+0x74>
    7f0a:	a1 00 21 01 00       	mov    0x12100,%eax
    7f0f:	83 c0 01             	add    $0x1,%eax
    7f12:	eb 05                	jmp    7f19 <do_syscall+0x79>
    7f14:	b8 00 00 00 00       	mov    $0x0,%eax
    7f19:	a3 00 21 01 00       	mov    %eax,0x12100
    }
    for(int i = 0; i < 0xfffff; i++);
    7f1e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f25:	eb 04                	jmp    7f2b <do_syscall+0x8b>
    7f27:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f2b:	81 7d f8 fe ff 0f 00 	cmpl   $0xffffe,-0x8(%ebp)
    7f32:	7e f3                	jle    7f27 <do_syscall+0x87>
}
    7f34:	90                   	nop
    7f35:	90                   	nop
    7f36:	c9                   	leave
    7f37:	c3                   	ret

00007f38 <sys_show>:

/// @brief 使用系统调用门调用do_syscall函数
/// @param str  需要显示的字符串
/// @param color    字符串的颜色
void sys_show(char *str, char color){
    7f38:	55                   	push   %ebp
    7f39:	89 e5                	mov    %esp,%ebp
    7f3b:	83 ec 14             	sub    $0x14,%esp
    7f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f41:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint32_t addr[] = {0, SYSCALL_SEG};
    7f44:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f4b:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)
    __asm__ __volatile("push %[color]; push %[str]; push %[id]; lcall *(%[a])"::[a]"r"(addr), [color]"m"(color), [str]"m"(str), [id]"r"(2));
    7f52:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f55:	ba 02 00 00 00       	mov    $0x2,%edx
    7f5a:	ff 75 ec             	push   -0x14(%ebp)
    7f5d:	ff 75 08             	push   0x8(%ebp)
    7f60:	52                   	push   %edx
    7f61:	ff 18                	lcall  *(%eax)
}
    7f63:	90                   	nop
    7f64:	c9                   	leave
    7f65:	c3                   	ret

00007f66 <task_0>:

void task_0(void){
    7f66:	55                   	push   %ebp
    7f67:	89 e5                	mov    %esp,%ebp
    7f69:	83 ec 10             	sub    $0x10,%esp
    char* str = "task a: 1234";
    7f6c:	c7 45 f8 00 90 00 00 	movl   $0x9000,-0x8(%ebp)
    uint8_t color = 0;
    7f73:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(;;){
        sys_show(str, color++);
    7f77:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7f7b:	8d 42 01             	lea    0x1(%edx),%eax
    7f7e:	88 45 ff             	mov    %al,-0x1(%ebp)
    7f81:	89 d0                	mov    %edx,%eax
    7f83:	0f be c0             	movsbl %al,%eax
    7f86:	50                   	push   %eax
    7f87:	ff 75 f8             	push   -0x8(%ebp)
    7f8a:	e8 a9 ff ff ff       	call   7f38 <sys_show>
    7f8f:	83 c4 08             	add    $0x8,%esp
    7f92:	eb e3                	jmp    7f77 <task_0+0x11>

00007f94 <task_1>:
    }
}

void task_1(void){
    7f94:	55                   	push   %ebp
    7f95:	89 e5                	mov    %esp,%ebp
    7f97:	83 ec 10             	sub    $0x10,%esp
    char* str = "task b: 5678";
    7f9a:	c7 45 f8 0d 90 00 00 	movl   $0x900d,-0x8(%ebp)
    uint8_t color = 0;
    7fa1:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(;;){
        sys_show(str, color--);
    7fa5:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7fa9:	8d 42 ff             	lea    -0x1(%edx),%eax
    7fac:	88 45 ff             	mov    %al,-0x1(%ebp)
    7faf:	89 d0                	mov    %edx,%eax
    7fb1:	0f be c0             	movsbl %al,%eax
    7fb4:	50                   	push   %eax
    7fb5:	ff 75 f8             	push   -0x8(%ebp)
    7fb8:	e8 7b ff ff ff       	call   7f38 <sys_show>
    7fbd:	83 c4 08             	add    $0x8,%esp
    7fc0:	eb e3                	jmp    7fa5 <task_1+0x11>

00007fc2 <task_sched>:
    }
}

void task_sched(void){
    7fc2:	55                   	push   %ebp
    7fc3:	89 e5                	mov    %esp,%ebp
    7fc5:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    task_tss = (task_tss == TASK0_TSS_SEG? TASK1_TSS_SEG: TASK0_TSS_SEG);
    7fc8:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7fcd:	83 f8 28             	cmp    $0x28,%eax
    7fd0:	75 07                	jne    7fd9 <task_sched+0x17>
    7fd2:	b8 30 00 00 00       	mov    $0x30,%eax
    7fd7:	eb 05                	jmp    7fde <task_sched+0x1c>
    7fd9:	b8 28 00 00 00       	mov    $0x28,%eax
    7fde:	a3 e8 d8 00 00       	mov    %eax,0xd8e8

    uint32_t addr[] = {0, task_tss};
    7fe3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7fea:	a1 e8 d8 00 00       	mov    0xd8e8,%eax
    7fef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile("ljmpl *(%[a])"::[a]"r"(addr));
    7ff2:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7ff5:	ff 28                	ljmp   *(%eax)
}
    7ff7:	90                   	nop
    7ff8:	c9                   	leave
    7ff9:	c3                   	ret

00007ffa <outb>:
};

/// @brief 调用汇编函数outb
/// @param data 传入al寄存器的值
/// @param port 传入dx寄存器的值
void outb(uint8_t data, uint16_t port){
    7ffa:	55                   	push   %ebp
    7ffb:	89 e5                	mov    %esp,%ebp
    7ffd:	83 ec 08             	sub    $0x8,%esp
    8000:	8b 55 08             	mov    0x8(%ebp),%edx
    8003:	8b 45 0c             	mov    0xc(%ebp),%eax
    8006:	88 55 fc             	mov    %dl,-0x4(%ebp)
    8009:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    800d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    8011:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    8015:	ee                   	out    %al,(%dx)
}
    8016:	90                   	nop
    8017:	c9                   	leave
    8018:	c3                   	ret

00008019 <os_init>:
void timer_init(void);
void syscall_handler(void);

/// @brief 对os进行初始化
/// @param
void os_init(void){
    8019:	55                   	push   %ebp
    801a:	89 e5                	mov    %esp,%ebp
    801c:	83 ec 10             	sub    $0x10,%esp
    // 对8259芯片进行初始化
    outb(0x11, 0x20);
    801f:	6a 20                	push   $0x20
    8021:	6a 11                	push   $0x11
    8023:	e8 d2 ff ff ff       	call   7ffa <outb>
    8028:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xa0);
    802b:	68 a0 00 00 00       	push   $0xa0
    8030:	6a 11                	push   $0x11
    8032:	e8 c3 ff ff ff       	call   7ffa <outb>
    8037:	83 c4 08             	add    $0x8,%esp
    // 中断产生时，定义对应引脚查找IDT表中的位置
    outb(0x20, 0x21);
    803a:	6a 21                	push   $0x21
    803c:	6a 20                	push   $0x20
    803e:	e8 b7 ff ff ff       	call   7ffa <outb>
    8043:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);
    8046:	68 a1 00 00 00       	push   $0xa1
    804b:	6a 28                	push   $0x28
    804d:	e8 a8 ff ff ff       	call   7ffa <outb>
    8052:	83 c4 08             	add    $0x8,%esp
    // 配置从片的引脚2连接到主片的引脚2(引脚从0开始算起)
    outb(1 << 2, 0x21);
    8055:	6a 21                	push   $0x21
    8057:	6a 04                	push   $0x4
    8059:	e8 9c ff ff ff       	call   7ffa <outb>
    805e:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0xa1);
    8061:	68 a1 00 00 00       	push   $0xa1
    8066:	6a 04                	push   $0x4
    8068:	e8 8d ff ff ff       	call   7ffa <outb>
    806d:	83 c4 08             	add    $0x8,%esp

    outb(0x1, 0x21);
    8070:	6a 21                	push   $0x21
    8072:	6a 01                	push   $0x1
    8074:	e8 81 ff ff ff       	call   7ffa <outb>
    8079:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);
    807c:	68 a1 00 00 00       	push   $0xa1
    8081:	6a 01                	push   $0x1
    8083:	e8 72 ff ff ff       	call   7ffa <outb>
    8088:	83 c4 08             	add    $0x8,%esp
    // 屏蔽除了主片的0号引脚以外的所有中断信号
    outb(0xfe, 0x21);
    808b:	6a 21                	push   $0x21
    808d:	68 fe 00 00 00       	push   $0xfe
    8092:	e8 63 ff ff ff       	call   7ffa <outb>
    8097:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);
    809a:	68 a1 00 00 00       	push   $0xa1
    809f:	68 ff 00 00 00       	push   $0xff
    80a4:	e8 51 ff ff ff       	call   7ffa <outb>
    80a9:	83 c4 08             	add    $0x8,%esp

    // 对8253定时器进行初始化，设定成每100ms产生一次中断
    uint16_t tmo = 1193180 / 100;
    80ac:	66 c7 45 fe 9b 2e    	movw   $0x2e9b,-0x2(%ebp)
    outb(0x36, 0x43);
    80b2:	6a 43                	push   $0x43
    80b4:	6a 36                	push   $0x36
    80b6:	e8 3f ff ff ff       	call   7ffa <outb>
    80bb:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    80be:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    80c2:	0f b6 c0             	movzbl %al,%eax
    80c5:	6a 40                	push   $0x40
    80c7:	50                   	push   %eax
    80c8:	e8 2d ff ff ff       	call   7ffa <outb>
    80cd:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    80d0:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    80d4:	66 c1 e8 08          	shr    $0x8,%ax
    80d8:	0f b6 c0             	movzbl %al,%eax
    80db:	6a 40                	push   $0x40
    80dd:	50                   	push   %eax
    80de:	e8 17 ff ff ff       	call   7ffa <outb>
    80e3:	83 c4 08             	add    $0x8,%esp

    // 对IDT表的0x20位置进行设置
    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xffff;
    80e6:	b8 50 7e 00 00       	mov    $0x7e50,%eax
    80eb:	66 a3 00 1a 01 00    	mov    %ax,0x11a00
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    80f1:	b8 50 7e 00 00       	mov    $0x7e50,%eax
    80f6:	c1 e8 10             	shr    $0x10,%eax
    80f9:	66 a3 06 1a 01 00    	mov    %ax,0x11a06
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    80ff:	66 c7 05 02 1a 01 00 	movw   $0x8,0x11a02
    8106:	08 00 
    idt_table[0x20].attr = 0x8e00;                              // 0x8e00 1000 1110 0000 0000  32位，中断门，存在
    8108:	66 c7 05 04 1a 01 00 	movw   $0x8e00,0x11a04
    810f:	00 8e 

    // 设置两个任务段选择子的基地址
    gbt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    8111:	b8 00 d0 00 00       	mov    $0xd000,%eax
    8116:	66 a3 12 d1 00 00    	mov    %ax,0xd112
    gbt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    811c:	b8 80 d0 00 00       	mov    $0xd080,%eax
    8121:	66 a3 1a d1 00 00    	mov    %ax,0xd11a

    // 设置系统调用门的段偏移量
    gbt_table[SYSCALL_SEG / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    8127:	b8 64 7e 00 00       	mov    $0x7e64,%eax
    812c:	66 a3 20 d1 00 00    	mov    %ax,0xd120

    // 在虚拟内存地址为0x80000000的地方映射一块4KB的空间
    pg_dir[MAP_ADDR >> 22]= (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    8132:	b8 00 b0 00 00       	mov    $0xb000,%eax
    8137:	83 c8 07             	or     $0x7,%eax
    813a:	a3 00 c8 00 00       	mov    %eax,0xc800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    813f:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8144:	83 c8 07             	or     $0x7,%eax
    8147:	a3 00 b0 00 00       	mov    %eax,0xb000
    814c:	90                   	nop
    814d:	c9                   	leave
    814e:	c3                   	ret
