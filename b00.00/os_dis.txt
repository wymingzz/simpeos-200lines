
os.elf：     文件格式 elf32-i386
os.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00007c00

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000380 memsz 0x00000380 flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000058 memsz 0x00000058 flags r--
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00003800 memsz 0x00004000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00008000  00008000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00003800  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000800  0000c800  0000c800  00005800  2**3
                  ALLOC
  4 .comment      00000026  00000000  00000000  00005800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000001e5  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000132  00000000  00000000  00005a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000010c  00000000  00000000  00005b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000001b4  00000000  00000000  00005c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 00000057  00000000  00000000  00005e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e40 l       .text	00000000 gdt_desc
00007e46 l       .text	00000000 idt_desc
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
00009000 g     O .data	00001000 map_phy_buffer
00007e6b g     F .text	00000115 os_init
00007e37 g       .text	00000000 timer_init
0000c000 g     O .data	00000800 gbt_table
00007c00 g       .text	00000000 _start
00007e4c g     F .text	0000001f outb
0000c800 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c800 g       .data	00000000 _edata
0000d000 g       .bss	00000000 _end
0000c800 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:
  	.code16

	// 以下是代码区
 	.text
_start:
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32, %bx		// 目标内存地址
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx			// 从哪个扇区开始读
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax			// ah为读取的扇区个数，al表示是读磁盘
	mov $0x80, %dx			// 从哪个磁盘读取数据
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi

	jc	read_self_all		// 判断flags的cf表示位是否是1，即读取数据是否出错，出错则跳转

	cli						// 关中断
    7c23:	fa                   	cli

	lgdt [gdt_desc]			// 设置GDT表的内存地址
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	40                   	inc    %eax
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt [idt_desc]			// 设置IDT表的内存地址
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	46                   	inc    %esi
    7c2d:	7e 66                	jle    7c95 <read_self_all+0x82>
	// 将寄存器cr0的第一位置1，即进入保护模式
	mov $1, %eax
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.byte 0x55, 0xaa

	.code32
	.text
_start_32:
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
 	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	call os_init
    7e13:	e8 53 00 00 00       	call   7e6b <os_init>

	// 将页目录表的地址放入cr3寄存器中
	mov $pg_dir, %eax
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3

	// 将寄存器cr4的第四位置1，即开启4MB的分页映射机制
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4

	// 将寄存器cr0的最高位置1，即进入分页模式
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	sti						// 开中断
    7e34:	fb                   	sti
	jmp .
    7e35:	eb fe                	jmp    7e35 <_start_32+0x35>

00007e37 <timer_init>:

timer_init:					// 中断处理函数
	push %ds
    7e37:	1e                   	push   %ds
	pusha
    7e38:	60                   	pusha

	mov $0x20, %al
    7e39:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e3b:	e6 20                	out    %al,$0x20

	popa
    7e3d:	61                   	popa
	pop %ds
    7e3e:	1f                   	pop    %ds
	iret					//中断返回
    7e3f:	cf                   	iret

00007e40 <gdt_desc>:
    7e40:	ff 07                	incl   (%edi)
    7e42:	00 c0                	add    %al,%al
	...

00007e46 <idt_desc>:
    7e46:	ff 07                	incl   (%edi)
    7e48:	00 c8                	add    %cl,%al
	...

00007e4c <outb>:
};

/// @brief 调用汇编函数outb
/// @param data 传入al寄存器的值
/// @param port 传入dx寄存器的值
void outb(uint8_t data, uint16_t port){
    7e4c:	55                   	push   %ebp
    7e4d:	89 e5                	mov    %esp,%ebp
    7e4f:	83 ec 08             	sub    $0x8,%esp
    7e52:	8b 55 08             	mov    0x8(%ebp),%edx
    7e55:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e58:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e5b:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7e5f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e63:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e67:	ee                   	out    %al,(%dx)
}
    7e68:	90                   	nop
    7e69:	c9                   	leave
    7e6a:	c3                   	ret

00007e6b <os_init>:
// 声明汇编代码中的自定义函数
void timer_init(void);

/// @brief 对os进行初始化
/// @param
void os_init(void){
    7e6b:	55                   	push   %ebp
    7e6c:	89 e5                	mov    %esp,%ebp
    7e6e:	83 ec 10             	sub    $0x10,%esp
    // 对8259芯片进行初始化
    outb(0x11, 0x20);
    7e71:	6a 20                	push   $0x20
    7e73:	6a 11                	push   $0x11
    7e75:	e8 d2 ff ff ff       	call   7e4c <outb>
    7e7a:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xa0);
    7e7d:	68 a0 00 00 00       	push   $0xa0
    7e82:	6a 11                	push   $0x11
    7e84:	e8 c3 ff ff ff       	call   7e4c <outb>
    7e89:	83 c4 08             	add    $0x8,%esp
    // 中断产生时，定义对应引脚查找IDT表中的位置
    outb(0x20, 0x21);
    7e8c:	6a 21                	push   $0x21
    7e8e:	6a 20                	push   $0x20
    7e90:	e8 b7 ff ff ff       	call   7e4c <outb>
    7e95:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);
    7e98:	68 a1 00 00 00       	push   $0xa1
    7e9d:	6a 28                	push   $0x28
    7e9f:	e8 a8 ff ff ff       	call   7e4c <outb>
    7ea4:	83 c4 08             	add    $0x8,%esp
    // 配置从片的引脚2连接到主片的引脚2(引脚从0开始算起)
    outb(1 << 2, 0x21);
    7ea7:	6a 21                	push   $0x21
    7ea9:	6a 04                	push   $0x4
    7eab:	e8 9c ff ff ff       	call   7e4c <outb>
    7eb0:	83 c4 08             	add    $0x8,%esp
    outb(1 << 2, 0xa1);
    7eb3:	68 a1 00 00 00       	push   $0xa1
    7eb8:	6a 04                	push   $0x4
    7eba:	e8 8d ff ff ff       	call   7e4c <outb>
    7ebf:	83 c4 08             	add    $0x8,%esp

    outb(0x1, 0x21);
    7ec2:	6a 21                	push   $0x21
    7ec4:	6a 01                	push   $0x1
    7ec6:	e8 81 ff ff ff       	call   7e4c <outb>
    7ecb:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);
    7ece:	68 a1 00 00 00       	push   $0xa1
    7ed3:	6a 01                	push   $0x1
    7ed5:	e8 72 ff ff ff       	call   7e4c <outb>
    7eda:	83 c4 08             	add    $0x8,%esp
    // 屏蔽除了主片的0号引脚以外的所有中断信号
    outb(0xfe, 0x21);
    7edd:	6a 21                	push   $0x21
    7edf:	68 fe 00 00 00       	push   $0xfe
    7ee4:	e8 63 ff ff ff       	call   7e4c <outb>
    7ee9:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);
    7eec:	68 a1 00 00 00       	push   $0xa1
    7ef1:	68 ff 00 00 00       	push   $0xff
    7ef6:	e8 51 ff ff ff       	call   7e4c <outb>
    7efb:	83 c4 08             	add    $0x8,%esp

    // 对8253定时器进行初始化，设定成每100ms产生一次中断
    uint16_t tmo = 1193180 / 100;
    7efe:	66 c7 45 fe 9b 2e    	movw   $0x2e9b,-0x2(%ebp)
    outb(0x36, 0x43);
    7f04:	6a 43                	push   $0x43
    7f06:	6a 36                	push   $0x36
    7f08:	e8 3f ff ff ff       	call   7e4c <outb>
    7f0d:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    7f10:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    7f14:	0f b6 c0             	movzbl %al,%eax
    7f17:	6a 40                	push   $0x40
    7f19:	50                   	push   %eax
    7f1a:	e8 2d ff ff ff       	call   7e4c <outb>
    7f1f:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    7f22:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
    7f26:	66 c1 e8 08          	shr    $0x8,%ax
    7f2a:	0f b6 c0             	movzbl %al,%eax
    7f2d:	6a 40                	push   $0x40
    7f2f:	50                   	push   %eax
    7f30:	e8 17 ff ff ff       	call   7e4c <outb>
    7f35:	83 c4 08             	add    $0x8,%esp

    // 对IDT表的0x20位置进行设置
    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xffff;
    7f38:	b8 37 7e 00 00       	mov    $0x7e37,%eax
    7f3d:	66 a3 00 c9 00 00    	mov    %ax,0xc900
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    7f43:	b8 37 7e 00 00       	mov    $0x7e37,%eax
    7f48:	c1 e8 10             	shr    $0x10,%eax
    7f4b:	66 a3 06 c9 00 00    	mov    %ax,0xc906
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7f51:	66 c7 05 02 c9 00 00 	movw   $0x8,0xc902
    7f58:	08 00 
    idt_table[0x20].attr = 0x8e00;                              // 0x8e00 1000 1110 0000 0000  32位，中断门，存在
    7f5a:	66 c7 05 04 c9 00 00 	movw   $0x8e00,0xc904
    7f61:	00 8e 

    // 在虚拟内存地址为0x80000000的地方映射一块4KB的空间
    pg_dir[MAP_ADDR >> 22]= (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f63:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f68:	83 c8 07             	or     $0x7,%eax
    7f6b:	a3 00 b8 00 00       	mov    %eax,0xb800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f70:	b8 00 90 00 00       	mov    $0x9000,%eax
    7f75:	83 c8 07             	or     $0x7,%eax
    7f78:	a3 00 a0 00 00       	mov    %eax,0xa000
    7f7d:	90                   	nop
    7f7e:	c9                   	leave
    7f7f:	c3                   	ret
