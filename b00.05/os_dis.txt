
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000e90 memsz 0x00000e90 flags r-x
    LOAD off    0x00001000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00002800 memsz 0x00004000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000038  00007e58  00007e58  00000e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002800  00009000  00009000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001000  0000c000  0000c000  00003800  2**12
                  ALLOC
  4 .comment      00000011  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00003818  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000184  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c9  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000009f  00000000  00000000  00003aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007e58 l    d  .eh_frame	00000000 .eh_frame
00009000 l    d  .data	00000000 .data
0000c000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c0f l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e32 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
00009000 l     O .data	00001000 pg_table
0000b000 g     O .data	00000800 gdt_table
0000c000 g     O .bss	00001000 map_phy_buffer
00007e38 g     F .text	00000020 os_init
00007c00 g       .text	00000000 _start
0000b800 g       .bss	00000000 __bss_start
0000a000 g     O .data	00001000 pg_dir
0000b800 g       .data	00000000 _edata
0000d000 g       .bss	00000000 _end



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start:
	// x86使用段寄存器中的内容作为内存访问的基址，因此以下预先设置好
	mov $0, %ax				// 设置代码段
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds			// 设置数据段
	mov %ax, %es			// 设置数据段
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss			// 设置栈段
    7c07:	8e d0                	mov    %eax,%ss
	mov $_start, %esp		// 设置栈的起始地址
    7c09:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c0f <read_self_all>:

	// 计算机上电启动后，只取512字节到0x7c00处，即相当于自己只有个头在内存，所以下面全部出来
	// 将自己的其余部分读取到0x7E00处，即0x7c00的后512字节
read_self_all:
	mov $_start_32, %bx	// 读取到的内存地址
    7c0f:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx		// ch:磁道号，cl起始扇区号
    7c14:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240, %ax	// ah: 0x42读磁盘命令, al=0x40 64个扇区，多读一些, 32KB
	mov $0x80, %dx		// dh: 磁头号，dl驱动器号0x80(磁盘1)
    7c1a:	00 cd                	add    %cl,%ch
	int $0x0013
    7c1c:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all	// 读取失败，则重复

	//  加载idt和gdt表, 进入保护模式
	cli					// 关中断
    7c1f:	fa                   	cli    
	lgdt gdt_desc		// 加载gdt表，原来写的是[gdt_desc]，在windows上不识别，所以改了
    7c20:	0f 01 16             	lgdtl  (%esi)
    7c23:	32 7e 66             	xor    0x66(%esi),%bh
	mov $1, %eax
    7c26:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax			// 设置PE位，进入保护模式
    7c2b:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG, $_start_32	// 进入32位保护模式代码，可以运行32位指令
    7c2e:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	// 32位保护模式，位于512字节后
	.code32
	.text
_start_32:
	// 重新加载数据段寄存器
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp

	// 跳转到c语言中运行
	call os_init
    7e0f:	e8 24 00 00 00       	call   7e38 <os_init>

	// 打开分页机制
	mov $pg_dir, %eax
    7e14:	b8 00 a0 00 00       	mov    $0xa000,%eax
	mov %eax, %cr3
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax			// PSE位，支持4MB分页
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax		// 打开PG位，开启分页机制
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	jmp .
    7e30:	eb fe                	jmp    7e30 <_start_32+0x30>

00007e32 <gdt_desc>:
    7e32:	ff 07                	incl   (%edi)
    7e34:	00                   	.byte 0x0
    7e35:	b0 00                	mov    $0x0,%al
	...

00007e38 <os_init>:
    [KERNEL_CODE_SEG / 8] = {0xffff, 0x0000, 0x9a00, 0x00cf},
    // 0x00cf93000000ffff - 从0地址开始，P存在，DPL=0，Type=非系统段，数据段，界限4G，可读写
    [KERNEL_DATA_SEG/ 8] = {0xffff, 0x0000, 0x9200, 0x00cf},
};

void os_init (void) {
    7e38:	55                   	push   %ebp
    7e39:	89 e5                	mov    %esp,%ebp
    // 虚拟内存
    // 0x80000000开始的4MB区域的映射
    pg_dir[MAP_ADDR >> 22] = (uint32_t)pg_table | PDE_P | PDE_W | PDE_U;
    7e3b:	b8 00 90 00 00       	mov    $0x9000,%eax
    7e40:	83 c8 07             	or     $0x7,%eax
    7e43:	a3 00 a8 00 00       	mov    %eax,0xa800
    pg_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer| PDE_P | PDE_W | PDE_U;
    7e48:	b8 00 c0 00 00       	mov    $0xc000,%eax
    7e4d:	83 c8 07             	or     $0x7,%eax
    7e50:	a3 00 90 00 00       	mov    %eax,0x9000
    7e55:	90                   	nop
    7e56:	5d                   	pop    %ebp
    7e57:	c3                   	ret    
